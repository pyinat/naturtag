name: Deploy

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      pre-release-suffix:
        description: 'Version suffix for pre-releases ("a", "b", "rc", etc.)'
        required: false
        default: 'dev'
      pre-release-version:
        description: 'Version number for pre-releases; defaults to build number'
        required: false
        default: ''
env:
  LATEST_PY_VERSION: '3.10'


jobs:
  release-pypi-package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ env.LATEST_PY_VERSION }}
      - uses: snok/install-poetry@v1.3.1
        with:
          version: 1.2.0a2
          virtualenvs-in-project: true

      - name: Set pre-release version
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        env:
          pre-release-suffix: ${{ github.event.inputs.pre-release-suffix || 'dev' }}
          pre-release-version: ${{ github.event.inputs.pre-release-version || github.run_number }}
        run: |
          poetry version $(poetry version -s).${{ env.pre-release-suffix }}${{ env.pre-release-version }}
          poetry version

      - name: Build and publish to pypi
        run: |
          poetry build
          poetry publish -u  __token__ -p ${{ secrets.PYPI_TOKEN }}


  build-app-packages:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ env.LATEST_PY_VERSION }}
      - uses: snok/install-poetry@v1.3.1
        with:
          version: 1.2.0a2
          virtualenvs-in-project: true

      - name: Install system packages
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt-get install -y libegl-dev libxcb1-dev libxcb-image0 libxcb-render0 libwebp-dev libpng16-16 rpm

      - name: Cache python packages
        id: cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ env.LATEST_PY_VERSION }}-pyinstaller-${{ matrix.os }}-${{ hashFiles('poetry.lock') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          poetry install -v --without dev --extras ui
          poetry run pip install -U pyinstaller setuptools
      - name: Build PyInstaller package
        run: poetry run pyinstaller -y packaging/naturtag.spec

      # Include taxon FTS db, compress, and set platform name
      - name: Finish artifact (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          ASSETS=dist/naturtag/assets
          tar -xvzf $ASSETS/taxon-fts-en.tar.gz --directory $ASSETS/
          rm $ASSETS/taxon-fts-en.tar.gz
          tar -C dist/naturtag/ -czvf naturtag-linux.tar.gz .
          echo "DIST_NAME=linux" >> $GITHUB_ENV

      - name: Finish artifact (MacOS)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          ASSETS=dist/naturtag/Contents/Resources/assets
          tar -xvzf $ASSETS/taxon-fts-en.tar.gz --directory $ASSETS/
          rm $ASSETS/taxon-fts-en.tar.gz
          tar -C dist/naturtag/ -czvf naturtag-macos.tar.gz .
          echo "DIST_NAME=macos" >> $GITHUB_ENV

      - name: Finish artifact (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          tar -xvzf dist\naturtag\assets\taxon-fts-en.tar.gz --directory dist\naturtag\assets\
          Remove-Item dist\naturtag\assets\taxon-fts-en.tar.gz
          tar -C dist\naturtag\ -czvf naturtag-windows.tar.gz .
          echo "DIST_NAME=windows" >> $env:GITHUB_ENV

      # Build deb, snap, and rpm packages
      - name: Build Linux packages with FPM
        if : ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          gem install fpm --user-install
          cd packaging
          ./build_fpm.sh

      # Upload workflow artifacts
      - name: Upload PyInstaller workflow artifact
        uses: actions/upload-artifact@v3
        with:
          name: naturtag-${{ env.DIST_NAME }}.tar.gz
          path: naturtag-${{ env.DIST_NAME }}.tar.gz
          retention-days: 7
      - name: Upload FPM workflow artifacts
        if : ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: naturtag-fpm
          path: dist/naturtag.*
          retention-days: 7


  # Create a release with all workflow artifacts attached
  release-app-packages:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build-app-packages
    steps:
      - uses: actions/download-artifact@v3
      - name: Collect artifacts from workflow subdirs
        run: |
          find . -type d -depth -name 'naturtag*' -exec mv {} {}_dir \;
          find . -type f -mindepth 2 -exec mv -- {} . \;
          rmdir *_dir
          ls -ARl

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: 'naturtag*'
